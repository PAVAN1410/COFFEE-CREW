import 'package:brew_crew/Services/database.dart';
import 'package:brew_crew/shared/loading.dart';
import 'package:flutter/material.dart';
import 'package:brew_crew/shared/constants.dart';
import 'package:brew_crew/models/user.dart';
import 'package:provider/provider.dart';

class settingsForm extends StatefulWidget {
  @override
  _settingsFormState createState() => _settingsFormState();
}

class _settingsFormState extends State<settingsForm> {
  
  final _formKey =GlobalKey<FormState>();
  final List<String> sugars= ['0','1','2','3','4'];

  String _currentName;
  String _currentSugars;
  int _currentStrength;

  @override
  Widget build(BuildContext context) {
    final user =Provider.of<User>(context);
    return StreamBuilder<UserData>(
      stream: DatabaseService(uid: user.uid).userData,
      builder: (context, snapshot) {
        if(snapshot.hasData){
          UserData userData = snapshot.data;
          return Form(
          key: _formKey,
          child: Column(
            children: <Widget>[
              Text(
                'update your brew settings',
                style: TextStyle(fontSize: 15.0,),
                ),
                SizedBox(height: 20.0),
                TextFormField(
                  initialValue: userData.name,
                  decoration: textInputDecoration.copyWith(hintText: 'Name', fillColor: Colors.brown[300]),

                  validator: (val) => val.isEmpty ? 'please enter a name' : null,
                  onChanged: (val) => setState(()=> _currentName=val),
                ),
                SizedBox(height: 20.0,),
              
              //dropdown
              DropdownButtonFormField(
                decoration: textInputDecoration.copyWith(hintText: 'sugar', fillColor: Colors.brown[300]),
                value: _currentSugars ?? userData.sugars,
                items: sugars.map((sugar){
                  return DropdownMenuItem(
                    value: sugar,
                    child:Text('$sugar sugars') ,
                    );
                }).toList(),

                onChanged: (val) => setState(()=> _currentSugars=val),
              ),

              //Slider
              Slider(
                
                min: 100,
                max: 900,
                divisions: 8,
                onChanged: (val) => setState(() =>_currentStrength = val.round()),
                value: (_currentStrength).toDouble() ?? userData.strength,
                activeColor: Colors.brown[_currentStrength ?? userData.strength],
                inactiveColor: Colors.brown[_currentStrength ?? userData.strength],
              ),

              RaisedButton(
                color: Colors.pink[400],
                child: Text(
                  'Update',
                  style: TextStyle(color: Colors.white),
                  ),

                onPressed: () async{
                  print(_currentName);
                  print(_currentStrength);
                  print(_currentSugars);
                })
            ],
          ),
          
        );
        }else{
          return Loading();
        }
        
      }
    );
  }
}


// some useful Widgets

Safe area
Wrap => used insted of rows and columns using [direction: Axis.horizontal or .vertical] 
Rich text => used for different colors and styles in text
=> RichText(text:
    TextSpan(text:'sdaf',style:  .....)
    children: [
      again TextSpan.....
    ]
)
clipRRect => it can clip any container or images edges using boader radius
MediaQuery => MediaQuery.of(context).[something]
Flexible : 
SizedBox


Row(
                mainAxisAlignment: MainAxisAlignment.spaceEvenly,
                children: <Widget>[
                  Align(
                    alignment: Alignment.centerLeft,
                    child: Container(
                      child: Column(
                        children: <Widget>[
                          Align(
                    alignment: Alignment.centerLeft,
                    child: Text('user name') ,
                    ),
                    Align(
                    alignment: Alignment.centerLeft,
                    child: Container(
                      child: Column(
                        children: <Widget>[
                          Align(
                    alignment: Alignment.centerLeft,
                    child: Text(' Pavan ') ,
                    ),

                        ],
                        
),
),
)
],
)